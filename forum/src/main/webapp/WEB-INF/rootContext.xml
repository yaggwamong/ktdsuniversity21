<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd">

<!-- rootContext에는 DB와 관련된 설정만 적는다! -->

	<context:property-placeholder location="/WEB-INF/config/appconfig.properties"/>

	<bean id="dataSource"
		  class="org.apache.commons.dbcp.BasicDataSource">
		<property name="driverClassName" value="${jdbc.oracle.driver_class_name}" />
		<property name="url" value="${jdbc.oracle.url}" />
		<property name="username" value="${jdbc.oracle.username}" />
		<property name="password" value="${jdbc.oracle.password}" />
	</bean>
	
	<!-- MyBatis도 DB 연동을 돕는 것이기 때문에 rootContext에 설정을 적는다 -->
	
	<!-- Setter를 이용한 방법 -->
	<bean id="sqlSessionFactory"
		  class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="mapperLocations" value="classpath:/com/hello/**/dao/mapper/*.xml" />
		<property name="configLocation" value="classpath:/mybatis/mybatis-config.xml" />
	</bean>
	
	<!-- 생성자를 이용한 방법 -->
	<bean id="sqlTemplate"
		  class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg name="sqlSessionFactory" ref="sqlSessionFactory" />
	</bean>
	

	
</beans>
